class LiquidStickyHeaderBehavior extends LiquidBehavior{static name="liquidStickyHeader";static viewModelEvents={"change:computedStyles":"initialize","change:isSticky":"setHeaderAttrs"};options(){return{end:"max",offset:0}}get bindToThis(){return["handleContainerOnEnter","handleContainerOnLeaveBack"]}initialize(){this.scrollTriggers=[],this.containerModels=[],this.stopListening(),this.alwaysVisibleContainersModels=this.view.model.get("childrenCollection").filter(e=>e.get("isTopLevelContainer")).filter(e=>!e.view.el.dataset[DATA_ATTRS.SHOW_ON_STICKY.JS_DATASET]&&!e.view.el.dataset[DATA_ATTRS.HIDE_ON_STICKY.JS_DATASET]),this.alwaysVisibleContainersModels.length&&this.alwaysVisibleContainersModels.forEach((e,t)=>_.defer(this.initStickyContainers.bind(this,e,t)))}setHeaderAttrs(e,t){this.view.el.setAttribute(DATA_ATTRS.STICKY_HEADER.HTML_ATTR,t)}setContainerAttrs(e,t){e.view.el.setAttribute(DATA_ATTRS.STICKY_CONTAINER.HTML_ATTR,t)}initStickyContainers(e,t){this.setContainerAttrs(e,!1),this.containerModelEventHandler(e),this.buildScrollTrigger(e,t)}buildScrollTrigger(e,t){const i=ScrollTrigger.create({trigger:e.view.el,pin:!0,pinSpacing:!1,start:`top-=${this.getOption("offset")+(document.body.classList.contains("admin-bar")&&window.innerWidth>=601?32:0)} top`,endTrigger:document.body,end:"bottom top",onEnter:()=>this.handleContainerOnEnter(e,t),onLeaveBack:()=>this.handleContainerOnLeaveBack(e,t)});e.view.el.style.zIndex=this.alwaysVisibleContainersModels.length-t,this.scrollTriggers.push(i)}handleContainerOnEnter(e,t){t===this.alwaysVisibleContainersModels.length-1&&this.handleHeaderStickyChange(!0),this.handleContainerStickyChange(e,!0),e.view.el.style.zIndex=this.alwaysVisibleContainersModels.length-t}handleContainerOnLeaveBack(e,t){t===0&&this.handleHeaderStickyChange(!1),this.handleContainerStickyChange(e,!1),e.view.el.style.zIndex=this.alwaysVisibleContainersModels.length-t}containerModelEventHandler(e){this.listenTo(e,"change:isSticky",(t,i)=>this.setContainerAttrs(e,i))}handleContainerStickyChange(e,t){e.set({isSticky:t})}handleHeaderStickyChange(e){this.view.model.set({isSticky:e})}destroy(){this.scrollTriggers?.forEach(e=>e.kill()),this.alwaysVisibleContainersModels?.forEach(e=>e.el&&(e.el.style.zIndex="")),super.destroy()}}window.liquid?.app?.model?.set("loadedBehaviors",[...window.liquid.app.model.get("loadedBehaviors"),LiquidStickyHeaderBehavior]);
